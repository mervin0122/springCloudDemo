1.微服务
  强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用。可以有自己的数据量，也可以有统一的数据库。
  （将业务拆分成一个一个的服务，彻底的去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事）

2.SpringCloud和Springboot的关系
    SpringBoot专注于快速方便的开发单个个体微服务。
    SpringCloud是关注全局的微服务协调整理治理框架。它将SpringBoot开发的一个个单体微服务整合并管理起来，
为各个微服务直接提供配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、分布式会话等集成服务。

3.Eureka服务注册与发现（采用可C-S的设计架构）
    Eureka是Netflix的一个子模块，是一个基于Rest的服务，功能类似于dubbo的注册中心，比如Zookeeper
    >>>Eureka两个组件
    1）Eureka Server提供服务注册服务
    2）Eureka Client是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询（round-robin）复制算法的负载均衡器。
在应用启动后，将回显Eureka Server发现心跳（默认周期为30s）。如果Eureka Server在多个心跳周期内没有接到某个接到的心跳，Eureka Server将会从服务
注册表中把这个服务节点移除（默认90s）

4.Eureka与Zookeeper的比较
    Eureka保证的是AP，Zookeeper则是CP（A可用性，C一致性，P分区容错性）
    Eureka可以很多应对因网络故障导致部分节点失去联系的情况；Zookeeper当发生网络故障时整个注册服务会瘫痪

5.Ribbon负载均衡(Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端 负载均衡的工具)
    总结：Ribbin其实就是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，和eureka结合实其中的一个实例。
    >>Ribbon在工作是分成两步：
    ①先选择EurekaServer，它优先选择在同一个区域内负载较少的server
    ②在根据用户指定的策略，在从server取到的服务注册列表中选择一个地址
    其中Ribbon提供了多种策略：轮询、随机、根据响应时间加权、自定义的负载均衡算法等...

6.Feign负载均衡
    定义：Feign是一个声明式的Web服务客户的，使得编写Web服务客户的变得非常容易，只需要创建一个接口，然后在上面添加注解即可。
    >>>Feign集成了Ribbon：利用Ribbon维护服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，通feign值需要
定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用

7.Ribbon与Feign比较
    >>Feign通过接口的方法调用Rest服务，使得编写Java Http客户端变得容易，只需创建一个接口并使用注解方式来配置即可。
    而Ribbon则是使用Ribbon+RestTemplate,利用RestTemplate对http请求的封装处理，形成了一套模板化的调用方法。
    >>Feign在请求发送给Eureka服务器，通过Feign直接找到服务接口，由于在进行服务调用的时候融合了Ribbon技术，所以也支持负载均衡作用。

8.Hystrix断路器
     >>一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法
     ①服务熔断(当某个异常条件被触发，直接熔断整个服务，而不是一直等到此服务超时)
     ②服务降级（服务降级处理是在客户端实现完成的，与服务端没关系）